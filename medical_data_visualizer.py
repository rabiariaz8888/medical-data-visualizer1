# -*- coding: utf-8 -*-
"""Medical Data Visualizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_F44zEtbfAuigeJwuZMR4U0yZLEd16aB
"""

import pandas as pd

# Dataset URL from FCC repo (raw data)
url = "https://raw.githubusercontent.com/freeCodeCamp/boilerplate-medical-data-visualizer/master/medical_examination.csv"

# Read and save as CSV
df = pd.read_csv(url)
df.to_csv("medical_examination.csv", index=False)

print("âœ… File created: medical_examination.csv")
print(df.head())

import os
print(os.listdir())

!wget https://raw.githubusercontent.com/freeCodeCamp/boilerplate-medical-data-visualizer/master/medical_examination.csv

import pandas as pd

df = pd.read_csv("medical_examination.csv")
print(df.shape)   # should show (70000, 13)
print(df.head())

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Import data
df = pd.read_csv("medical_examination.csv")

# Step 2: Add overweight column
# BMI = weight / (height/100)^2
df['BMI'] = df['weight'] / ((df['height']/100) ** 2)
df['overweight'] = (df['BMI'] > 25).astype(int)

# Step 3: Normalize cholesterol and gluc
df['cholesterol'] = (df['cholesterol'] > 1).astype(int)
df['gluc'] = (df['gluc'] > 1).astype(int)

# Step 4: Categorical Plot
def draw_cat_plot():
    # Melt data
    df_cat = pd.melt(df, id_vars=['cardio'], value_vars=['active', 'alco', 'cholesterol', 'gluc', 'overweight', 'smoke'])

    # Group and reformat
    df_cat = df_cat.groupby(['cardio', 'variable', 'value']).size().reset_index(name='total')

    # Draw the catplot
    g = sns.catplot(x="variable", y="total", hue="value", col="cardio", kind="bar", data=df_cat)
    fig = g.fig
    return fig

# Show categorical plot
fig1 = draw_cat_plot()
plt.show()

# Step 5: Heat Map
def draw_heat_map():
    # Clean the data
    df_heat = df[
        (df['ap_lo'] <= df['ap_hi']) &
        (df['height'] >= df['height'].quantile(0.025)) &
        (df['height'] <= df['height'].quantile(0.975)) &
        (df['weight'] >= df['weight'].quantile(0.025)) &
        (df['weight'] <= df['weight'].quantile(0.975))
    ]

    # Calculate the correlation matrix
    corr = df_heat.corr()

    # Generate a mask for the upper triangle
    mask = np.triu(np.ones_like(corr, dtype=bool))

    # Set up the matplotlib figure
    fig, ax = plt.subplots(figsize=(12, 8))

    # Draw the heatmap
    sns.heatmap(corr, mask=mask, annot=True, fmt=".1f", center=0, square=True, cmap="coolwarm", cbar_kws={"shrink": .5})

    return fig

# Show heatmap
fig2 = draw_heat_map()
plt.show()

import unittest

class MedicalDataVisualizerTest(unittest.TestCase):
    def test_overweight_column(self):
        self.assertIn('overweight', df.columns, "Overweight column not found")
        self.assertTrue(set(df['overweight'].unique()).issubset({0,1}), "Overweight column should only contain 0 or 1")

    def test_cholesterol_gluc_normalized(self):
        self.assertTrue(set(df['cholesterol'].unique()).issubset({0,1}), "Cholesterol should only be 0 or 1")
        self.assertTrue(set(df['gluc'].unique()).issubset({0,1}), "Gluc should only be 0 or 1")

    def test_cat_plot(self):
        fig = draw_cat_plot()
        self.assertIsNotNone(fig, "Cat plot not generated")

    def test_heat_map(self):
        fig = draw_heat_map()
        self.assertIsNotNone(fig, "Heatmap not generated")

# Run tests
unittest.main(argv=[''], exit=False)